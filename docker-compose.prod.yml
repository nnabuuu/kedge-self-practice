version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: kedge-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-kedge_practice}
      POSTGRES_USER: ${POSTGRES_USER:-kedge_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/packages/dev/database/schema/seeds:/docker-entrypoint-initdb.d/seeds:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kedge_user} -d ${POSTGRES_DB:-kedge_practice}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: kedge-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Hasura GraphQL Engine
  hasura:
    image: hasura/graphql-engine:v2.36.0
    container_name: kedge-hasura
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "${HASURA_PORT:-28717}:8080"
    environment:
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgresql://${POSTGRES_USER:-kedge_user}:${DB_PASSWORD}@postgres:5432/${POSTGRES_DB:-kedge_practice}
      PG_DATABASE_URL: postgresql://${POSTGRES_USER:-kedge_user}:${DB_PASSWORD}@postgres:5432/${POSTGRES_DB:-kedge_practice}
      HASURA_GRAPHQL_ENABLE_CONSOLE: "false"
      HASURA_GRAPHQL_DEV_MODE: "false"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_CORS_DOMAIN: "https://${API_DOMAIN:-localhost}, https://${PRACTICE_DOMAIN:-localhost}, https://${PARSER_DOMAIN:-localhost}"
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Backend API Server
  api-server:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: kedge-api
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-8718}:8718"
    environment:
      NODE_ENV: production
      API_PORT: 8718
      NODE_DATABASE_URL: postgresql://${POSTGRES_USER:-kedge_user}:${DB_PASSWORD}@postgres:5432/${POSTGRES_DB:-kedge_practice}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB:-0}
      JWT_SECRET: ${JWT_SECRET}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      QUIZ_STORAGE_PATH: /app/storage
      HASURA_ENDPOINT: http://hasura:8080
      HASURA_ADMIN_SECRET: ${HASURA_ADMIN_SECRET}
      # CORS configuration
      CORS_ORIGINS: "https://${PRACTICE_DOMAIN:-localhost:5174},https://${PARSER_DOMAIN:-localhost:5173}"
      # File upload configuration
      MAX_FILE_SIZE: ${MAX_FILE_SIZE:-52428800}
      ALLOWED_FILE_TYPES: "docx,doc,pdf"
      # Email configuration (optional)
      SMTP_HOST: ${SMTP_HOST:-}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER:-}
      SMTP_PASS: ${SMTP_PASS:-}
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FILE: /app/logs/app.log
    volumes:
      - quiz_storage:/app/storage
      - quiz_logs:/app/logs
      - quiz_uploads:/app/uploads
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8718/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s

  # Frontend Practice App
  frontend-practice:
    build:
      context: ./frontend-practice
      dockerfile: Dockerfile.prod
      args:
        VITE_API_BASE_URL: https://${API_DOMAIN:-localhost:8718}/api/v1
        VITE_QUIZ_PARSER_URL: https://${PARSER_DOMAIN:-localhost:5173}
        VITE_VERSION: ${APP_VERSION:-1.0.0}
    container_name: kedge-practice
    ports:
      - "${PRACTICE_PORT:-5174}:80"
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Frontend Quiz Parser
  frontend-quiz-parser:
    build:
      context: ./frontend-quiz-parser
      dockerfile: Dockerfile.prod
      args:
        VITE_API_BASE_URL: https://${API_DOMAIN:-localhost:8718}/api/v1
        VITE_PRACTICE_APP_URL: https://${PRACTICE_DOMAIN:-localhost:5174}
        VITE_MAX_FILE_SIZE: ${MAX_FILE_SIZE_MB:-50}
        VITE_VERSION: ${APP_VERSION:-1.0.0}
    container_name: kedge-parser
    ports:
      - "${PARSER_PORT:-5173}:80"
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Optional - for single domain setup)
  nginx:
    image: nginx:alpine
    container_name: kedge-nginx
    depends_on:
      - api-server
      - frontend-practice
      - frontend-quiz-parser
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    restart: unless-stopped
    networks:
      - kedge-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  quiz_storage:
    driver: local
  quiz_logs:
    driver: local
  quiz_uploads:
    driver: local
  nginx_logs:
    driver: local

networks:
  kedge-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16