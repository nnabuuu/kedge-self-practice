#!/usr/bin/env bash
set -euo pipefail
export PROJECT_NAME="dev-database"

# shellcheck source=./_dev_utils
source "$NX_WORKSPACE_ROOT"/tools/bin/_dev_utils
echo_welcome

HASURA_PORT=${HASURA_GRAPHQL_SERVER_PORT:-'28717'}
HASURA_SECRET=${HASURA_GRAPHQL_ADMIN_SECRET:-'9AgJckEMHPRgrasj7Ey8jR'}
HASURA_ENDPOINT=${HASURA_GRAPHQL_ENDPOINT:-"http://localhost:$HASURA_PORT"}

print_usage() {
  echo "Usage: $0 {up|upd|deploy|down|logs|clean|reset|sync|init}"
  echo ""
  echo "Commands:"
  echo "  up     - Start database and apply migrations"
  echo "  down   - Stop database services"
  echo "  logs   - Show service logs"
  echo "  clean  - Stop and remove volumes"
  echo "  reset  - Clean and restart with fresh database"
  echo "  init   - Manually apply migrations (if up failed)"
  echo "  sync   - Upload artifact (development)"
}

main() {
  # check if command is passed
  if [ -z "${1:-}" ]; then
    print_usage
    exit 1
  fi

  local cmd=$1
  case $cmd in
  sync)
    check_remote_artifact_config
    upload_artifact
    ;;
  _up)
    shift
    _docker_compose up $@
    echo_ports
    ;;
  up)
    _docker_compose up -d
    echo -e "hasura console will be running at \e[32m$HASURA_ENDPOINT/console\e[m"

    echo -e "    with admin secret: \e[32m$HASURA_SECRET\e[m"
    echo "If you're starting from fresh, run:"
    echo '    hasura metadata apply && hasura migrate apply --all-databases && hasura metadata reload'

    echo -n "Waiting for hasura to be ready - $HASURA_ENDPOINT"
    for _ in $(seq 1 999); do
      echo -n .
      if curl -so /dev/null "$HASURA_ENDPOINT"/v1/version; then
        echo
        echo "Hasura is ready!"
        
        # Change to the directory containing Hasura config.yaml
        cd "$PROJECT_ROOT/schema"
        
        # Wait for Hasura to fully initialize
        echo "Waiting for Hasura to initialize catalog and database connection..."
        
        # Wait up to 60 seconds for Hasura to be fully ready
        local retries=0
        while [ $retries -lt 12 ]; do
          sleep 5
          echo -n "."
          if curl -s -H "X-Hasura-Admin-Secret: $HASURA_SECRET" "$HASURA_ENDPOINT/v1/metadata" | grep -q "inconsistent_objects" 2>/dev/null; then
            echo " Ready!"
            break
          fi
          retries=$((retries + 1))
        done
        
        if [ $retries -eq 12 ]; then
          echo " Timeout, but proceeding anyway..."
        fi
        
        echo "Applying migrations..."
        
        # Apply migrations first (this creates the database schema)
        hasura migrate apply --all-databases \
          --endpoint "$HASURA_ENDPOINT" \
          --admin-secret "$HASURA_SECRET" \
          --skip-update-check || echo "Migration apply failed or already applied"
        
        # Then apply metadata (this sets up GraphQL schema)
        echo "Applying metadata..."
        hasura metadata apply \
          --endpoint "$HASURA_ENDPOINT" \
          --admin-secret "$HASURA_SECRET" \
          --skip-update-check || echo "Metadata apply failed or already applied"
        
        # Finally reload metadata to ensure consistency
        echo "Reloading metadata..."
        hasura metadata reload \
          --endpoint "$HASURA_ENDPOINT" \
          --admin-secret "$HASURA_SECRET" \
          --skip-update-check || echo "Metadata reload failed"
#          && hasura seed apply --all-databases \
#          --endpoint "$HASURA_ENDPOINT" \
#          --admin-secret "$HASURA_SECRET"
        exit 0
      fi
      sleep 0.5
    done
    echo "Failed to connect to local hasura console"
    ;;
  down)
    _docker_compose down
    ;;
  logs)
    _docker_compose logs -f --tail=100
    ;;
  clean)
    _docker_compose down -v -t 0
    ;;
  reset)
    _docker_compose down -v -t 0
    main up
    ;;
  pull)
    _docker_compose pull
    ;;
  init)
    echo "Manually applying Hasura migrations..."
    cd "$PROJECT_ROOT/schema"
    echo "Applying migrations..."
    hasura migrate apply --all-databases \
      --endpoint "$HASURA_ENDPOINT" \
      --admin-secret "$HASURA_SECRET" \
      --skip-update-check
    echo "Applying metadata..."
    hasura metadata apply \
      --endpoint "$HASURA_ENDPOINT" \
      --admin-secret "$HASURA_SECRET" \
      --skip-update-check
    echo "Reloading metadata..."
    hasura metadata reload \
      --endpoint "$HASURA_ENDPOINT" \
      --admin-secret "$HASURA_SECRET" \
      --skip-update-check
    ;;
  *)
    print_usage
    exit 1
    ;;
  esac
}

main $@
